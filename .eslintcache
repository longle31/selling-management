[{"D:\\web_development\\project\\selling-client\\src\\index.js":"1","D:\\web_development\\project\\selling-client\\src\\App.js":"2","D:\\web_development\\project\\selling-client\\src\\serviceWorker.js":"3","D:\\web_development\\project\\selling-client\\src\\app\\store.js":"4","D:\\web_development\\project\\selling-client\\src\\app\\NavBar.js":"5","D:\\web_development\\project\\selling-client\\src\\features\\products\\ProductsPage.js":"6","D:\\web_development\\project\\selling-client\\src\\features\\products\\productsSlice.js":"7","D:\\web_development\\project\\selling-client\\src\\api\\client.js":"8","D:\\web_development\\project\\selling-client\\src\\algorithms\\knapsack.js":"9","D:\\web_development\\project\\selling-client\\src\\app\\Toolbar.js":"10","D:\\web_development\\project\\selling-client\\src\\features\\products\\AnalysisModal.js":"11","D:\\web_development\\project\\selling-client\\src\\features\\strategies\\strategiesSlice.js":"12","D:\\web_development\\project\\selling-client\\src\\features\\strategies\\StrategiesPage.js":"13","D:\\web_development\\project\\selling-client\\src\\features\\products\\AddNewProductForm.js":"14"},{"size":644,"mtime":499162500000,"results":"15","hashOfConfig":"16"},{"size":821,"mtime":1607416377486,"results":"17","hashOfConfig":"16"},{"size":5141,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":324,"mtime":1607244884685,"results":"19","hashOfConfig":"16"},{"size":6398,"mtime":1607417506864,"results":"20","hashOfConfig":"16"},{"size":2191,"mtime":1607413638810,"results":"21","hashOfConfig":"16"},{"size":2055,"mtime":1607417158958,"results":"22","hashOfConfig":"16"},{"size":1441,"mtime":1607416795577,"results":"23","hashOfConfig":"16"},{"size":2330,"mtime":1606915402490,"results":"24","hashOfConfig":"16"},{"size":3018,"mtime":1607415944007,"results":"25","hashOfConfig":"16"},{"size":6951,"mtime":1607270422273,"results":"26","hashOfConfig":"16"},{"size":1682,"mtime":1607416840183,"results":"27","hashOfConfig":"16"},{"size":1917,"mtime":1607270723808,"results":"28","hashOfConfig":"16"},{"size":6620,"mtime":1607415562957,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"y1tflo",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},"D:\\web_development\\project\\selling-client\\src\\index.js",[],["64","65"],"D:\\web_development\\project\\selling-client\\src\\App.js",[],"D:\\web_development\\project\\selling-client\\src\\serviceWorker.js",[],"D:\\web_development\\project\\selling-client\\src\\app\\store.js",[],"D:\\web_development\\project\\selling-client\\src\\app\\NavBar.js",[],"D:\\web_development\\project\\selling-client\\src\\features\\products\\ProductsPage.js",["66","67","68"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport '../../algorithms/knapsack';\r\nimport { knapsack } from '../../algorithms/knapsack';\r\nimport { AddNewProductForm } from './AddNewProductForm';\r\nimport { AnalysisModal } from './AnalysisModal';\r\nimport { fetchProducts, selectAllProducts } from './productsSlice';\r\n\r\nexport const ProductsPage = () => {\r\n    const products = useSelector(selectAllProducts);\r\n    const status = useSelector(state => state.products.status);\r\n    const error = useSelector(state => state.error);\r\n    const dispatch = useDispatch();\r\n\r\n    const modalDisplayed = useSelector(state => state.products.productsModal.isDisplay);\r\n    const modalOption  = useSelector(state => state.products.productsModal.modalOption);\r\n\r\n\r\n    useEffect(()=>{\r\n        if(status === 'idle'){\r\n            dispatch(fetchProducts())\r\n        }\r\n    }, [status]);\r\n\r\n    let content;\r\n    if(status === 'failed'){\r\n        content = <tr>{error}</tr>\r\n\r\n    }else if(status === 'succeeded'){\r\n\r\n        content = products.map(product => \r\n            <tr key={product._id}>\r\n                <td data-label=\"Pro.ID\">{product._id}</td>\r\n                <td data-label=\"Pro.Name\">{product.productName}</td>\r\n                <td data-label=\"Pro.Type\">{product.productType}</td>\r\n                <td datsa-label=\"Price\">{product.price}$</td>\r\n                <td data-label=\"Cost\">{product.cost}$</td>\r\n            </tr>    \r\n        );\r\n    }else if(status === 'loading'){\r\n        content = <tr>loading...</tr>\r\n    }\r\n    \r\n\r\n\r\n    return (\r\n        <div className={modalDisplayed?\"page modal-open\":\"page\"}>\r\n            {modalDisplayed? modalOption === 0 ? <AnalysisModal/> : <AddNewProductForm/> :\"\"}\r\n            <table className=\"responsive-table\">\r\n                <thead>\r\n                    <th>Pro.ID</th>\r\n                    <th>Pro.Name</th>\r\n                    <th>Pro.Type</th>\r\n                    <th>Price</th>\r\n                    <th>Cost</th>\r\n                </thead>\r\n                <tbody>\r\n                    {content}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n\r\n\r\n}","D:\\web_development\\project\\selling-client\\src\\features\\products\\productsSlice.js",[],"D:\\web_development\\project\\selling-client\\src\\api\\client.js",[],"D:\\web_development\\project\\selling-client\\src\\algorithms\\knapsack.js",[],["69","70"],"D:\\web_development\\project\\selling-client\\src\\app\\Toolbar.js",[],"D:\\web_development\\project\\selling-client\\src\\features\\products\\AnalysisModal.js",["71"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { knapsack } from '../../algorithms/knapsack';\r\nimport { addNewStrategy } from '../strategies/strategiesSlice';\r\nimport { displayProductsModal, selectAllProducts } from './productsSlice';\r\n\r\nexport const AnalysisModal = () => {\r\n    const products = useSelector(selectAllProducts);\r\n    const dispatch = useDispatch();\r\n\r\n    const [step, setStep] = useState(0);\r\n\r\n    const [currentStrategy, setCurrentStrategy] = useState({\r\n        products: [],\r\n        totalPrice: 0,\r\n        totalCost: 0,\r\n        startingDate: \"\",\r\n        endingDate: \"\",\r\n        title: '',\r\n    });\r\n\r\n    const saveValiation = currentStrategy.products.length > 0 && currentStrategy.title\r\n        && currentStrategy.startingDate && currentStrategy.endingDate && currentStrategy.endingDate.localeCompare(currentStrategy.startingDate) > 0;\r\n\r\n    const renderedProducts = currentStrategy.products.map(product =>\r\n        <tr key={product._id}>\r\n            <td>{product.productName}</td>\r\n            <td>{product.price}</td>\r\n            <td>{product.cost}</td>\r\n        </tr>);\r\n\r\n    const analyze = () => {\r\n\r\n\r\n        let input = products.sort((a, b) => a.cost - b.cost);\r\n\r\n        const solution = knapsack(input, currentStrategy.totalCost);\r\n        setCurrentStrategy({\r\n            ...currentStrategy, totalPrice: solution.maxValue, products: solution.set,\r\n            totalCost: solution.set.reduce((total, p) => { return total + p.cost }, 0)\r\n        });\r\n\r\n        setStep(step + 1);\r\n    }\r\n\r\n    const save = () => {\r\n        \r\n        dispatch(addNewStrategy(currentStrategy));\r\n        setCurrentStrategy({\r\n            products: [],\r\n            totalPrice: 0,\r\n            totalCost: 0,\r\n            startingDate: \"\",\r\n            endingDate: \"\",\r\n            title: '',})\r\n        setStep(0);\r\n    }\r\n\r\n\r\n    return (\r\n        <div class=\"modal show fade \" id=\"analysisModal\" tabindex=\"-1\" aria-labelledby=\"analysisModalLabel\" aria-hidden=\"true\"\r\n            style={{ display: \"block\" }}\r\n        >\r\n            <div class=\"modal-dialog\">\r\n                <div class=\"modal-content\">\r\n                    <div class=\"modal-header\">\r\n                        <h5 class=\"modal-title\" id=\"analysisModalLabel\">Analyze</h5>\r\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\r\n                            onClick={() => dispatch(displayProductsModal(false))}>\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"modal-body\">\r\n\r\n                        <form>\r\n                            <div className=\"input-group flex-nowrap mb-2\">\r\n\r\n                                <span class=\"label input-group-text\">Total Cost</span>\r\n\r\n                                <input type=\"number\" min=\"0\" step=\"1\" name=\"cost\" value={currentStrategy.totalCost}\r\n                                    id=\"cost\" className=\"form-control\" onChange={(e) => setCurrentStrategy({ ...currentStrategy, totalCost: e.target.value })}\r\n                                />\r\n                            </div>\r\n                            {step !== 0 ?\r\n                                <div>\r\n                                    <div className=\"input-group flex-nowrap mb-2\">\r\n                                        <span class=\"label input-group-text\">Begin Date</span>\r\n                                        <input type=\"date\" name=\"beginDate\" id=\"beginDate\" className=\"form-control\"\r\n                                            value={currentStrategy.startingDate}\r\n                                            onChange={e => setCurrentStrategy({ ...currentStrategy, startingDate: e.target.value })}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"input-group flex-nowrap mb-2\">\r\n                                        <span class=\"label input-group-text\">End Date</span>\r\n                                        <input type=\"date\" name=\"endDate\" id=\"endDate\" className=\"form-control\"\r\n                                            value={currentStrategy.endingDate}\r\n                                            onChange={e => setCurrentStrategy({ ...currentStrategy, endingDate: e.target.value })}\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"input-group flex-nowrap mb-2\">\r\n                                        <span class=\"label input-group-text\">Title</span>\r\n                                        <input type=\"text\" name=\"title\" id=\"title\" className=\"form-control\"\r\n                                            value={currentStrategy.title}\r\n                                            onChange={e => setCurrentStrategy({ ...currentStrategy, title: e.target.value })}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                : \"\"}\r\n\r\n                        </form>\r\n\r\n\r\n                        <table className=\"table table-bordered table-hover assign-table\">\r\n                            <thead className=\"bg-success\">\r\n                                <tr>\r\n                                    <th>pro.name</th>\r\n                                    <th>price</th>\r\n                                    <th>cost</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"overflow-auto\">\r\n                                {renderedProducts}\r\n\r\n                            </tbody>\r\n                        </table>\r\n\r\n                    </div>\r\n                    <div class=\"modal-footer\">\r\n                        <button type=\"button\" class=\"btn btn-secondary\"\r\n                            data-dismiss=\"modal\"\r\n                            onClick={() => dispatch(displayProductsModal(false))}\r\n                        >Close</button>\r\n                        {step > 0 ? <button type=\"button\" class=\"btn btn-danger\"\r\n                            data-dismiss=\"modal\"\r\n                            onClick={() => step > 0 ? setStep(step - 1) : \"\"}\r\n                        >Previous</button> : \"\"}\r\n\r\n\r\n                        <button type=\"button\" className={step === 0 ? \"btn btn-warning\" : \"btn btn-primary\"}\r\n                            onClick={parseInt(step) === 0 ? analyze : save}\r\n                            disabled={step === 0 ? !currentStrategy.totalCost > 0 : (step === 1) ? !saveValiation : \"\"}\r\n                        >\r\n                            {step === 0 ? \"Analyze\" : \"Save\"}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","D:\\web_development\\project\\selling-client\\src\\features\\strategies\\strategiesSlice.js",[],"D:\\web_development\\project\\selling-client\\src\\features\\strategies\\StrategiesPage.js",["72","73"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchStrategies, selectAllStrategies } from './strategiesSlice';\r\n\r\n\r\nexport const StrategiesPage = () => {\r\n    const strategies = useSelector(selectAllStrategies);\r\n    const status = useSelector(state => state.strategies.status);\r\n    const error = useSelector(state => state.strategies.error);\r\n      \r\n    const dispatch = useDispatch();\r\n\r\n    const productsModal = useState({\r\n        isDisplay : false,\r\n    });\r\n\r\n\r\n    useEffect(()=>{\r\n        if(status === 'idle'){\r\n           dispatch(fetchStrategies())\r\n        }\r\n    }, [status]);\r\n\r\n    let content;\r\n    if(status === 'failed'){\r\n        content = <tr>{error}</tr>\r\n\r\n    }else if(status === 'succeeded'){\r\n\r\n        content = strategies.map(strategy => \r\n            <tr key={strategy._id}>\r\n                <td data-label=\"Strategy.ID\">{strategy._id}</td>\r\n                <td data-label=\"Strategy.title\">{strategy.title}</td>\r\n                <td data-label=\"Strategy.during\">{strategy.startingDate.substring(0 ,10) + \" => \" + strategy.endingDate.substr(0, 10)}</td>\r\n                <td datsa-label=\"Price\">{strategy.totalPrice}$</td>\r\n                <td data-label=\"Cost\">{strategy.totalCost}$</td>\r\n            </tr>    \r\n        );\r\n    }else if(status === 'loading'){\r\n        content = <tr>loading...</tr>\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className=\"page\">\r\n            \r\n            <table className=\"responsive-table\">\r\n                <thead>\r\n                    <th>Strategy.ID</th>\r\n                    <th>Strategy.Title</th>\r\n                    <th>during</th>\r\n                    <th>totalPrice</th>\r\n                    <th>totalCost</th>\r\n                </thead>\r\n                <tbody>\r\n                    {content}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n\r\n\r\n}","D:\\web_development\\project\\selling-client\\src\\features\\products\\AddNewProductForm.js",["74","75"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addNewProduct, displayProductsModal } from './productsSlice';\r\n\r\nexport const AddNewProductForm = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [loadingStatus, setLoadingStatus] = useState(false);\r\n    const [currentProduct, setCurrentProduct] = useState({\r\n        productName: '',\r\n        productType: 'smart phone',\r\n        price: 0,\r\n        cost: 0,\r\n    });\r\n\r\n\r\n    const validation = currentProduct.productName && currentProduct.price > 0 && currentProduct.cost > 0;\r\n\r\n\r\n\r\n\r\n    const createWarningApearance = (warningText, status) => {\r\n        if (status === false)\r\n            return (\r\n                <i className=\"fa fa-exclamation-circle input-group-text reg-icon\"\r\n                    style={{ color: \"red\" }} aria-hidden=\"true\"\r\n                >\r\n                </i>\r\n            );\r\n        else {\r\n            return (<i className=\"fa fa-check input-group-text reg-icon\"\r\n                style={{ color: \"green\" }} aria-hidden=\"true\"\r\n            >\r\n            </i>)\r\n        }\r\n    }\r\n\r\n\r\n    const onSave = () => {\r\n        setLoadingStatus(true);\r\n        dispatch(addNewProduct(currentProduct))\r\n            .then(() => {\r\n                setLoadingStatus(false)\r\n                setCurrentProduct({\r\n                    productName: '',\r\n                    productType: 'smart phone',\r\n                    price: 0,\r\n                    cost: 0,\r\n                })\r\n            })\r\n            .catch(() => setLoadingStatus(false));\r\n\r\n    }\r\n\r\n    return (\r\n        <div class=\"modal show fade \" id=\"addNewProductForm\" tabindex=\"-1\" aria-labelledby=\"analysisModalLabel\" aria-hidden=\"true\"\r\n            style={{ display: \"block\" }}\r\n        >\r\n            <div class=\"modal-dialog\">\r\n                <div class=\"modal-content\">\r\n                    <div class=\"modal-header\">\r\n                        <h5 class=\"modal-title\" id=\"analysisModalLabel\">Add New Product</h5>\r\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\r\n                            onClick={() => dispatch(displayProductsModal(false))}>\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <form id=\"addNewProductForm\">\r\n                            <div className='input-group flex-nowrap mb-2' >\r\n                                <div className=\"input-group-prepend\">\r\n                                    <span className=\"input-group-text\">Product Name</span>\r\n                                </div>\r\n\r\n                                <input type=\"text\" name=\"productName\" id=\"productName\"\r\n                                    className=\"form-control\" value={currentProduct.productName}\r\n                                    onChange={e => setCurrentProduct({ ...currentProduct, productName: e.target.value })}\r\n                                />\r\n                                <div className=\"input-group-append \">\r\n\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n                            <div className=\"input-group flex-nowrap mb-2\">\r\n                                <div className=\"input-group-prepend\">\r\n                                    <span className=\"input-group-text\">Type</span>\r\n                                </div>\r\n                                <select className=\"form-control\" name=\"type\" id=\"type\"\r\n                                    value={currentProduct.type}\r\n                                    onChange={e => setCurrentProduct({ ...currentProduct, type: e.target.vlue })}\r\n                                >\r\n                                    <option value=\"employee\">smart phone</option>\r\n                                    <option value=\"technician\">tablet</option>\r\n                                </select>\r\n                            </div>\r\n                            <div className='input-group flex-nowrap mb-2'>\r\n                                <div className=\"input-group-prepend\">\r\n                                    <span className=\"input-group-text\">Price</span>\r\n                                </div>\r\n\r\n                                <input type=\"number\" name=\"price\" id=\"price\"\r\n                                    datatoggle=\"tooltip\" title=\"Some tooltip text!\"\r\n                                    className=\"form-control\" min=\"0\" step=\"1\"\r\n                                    value={currentProduct.price}\r\n                                    onChange={e => setCurrentProduct({ ...currentProduct, price: e.target.value })}\r\n                                />\r\n                                <div className=\"input-group-append \">\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className='input-group flex-nowrap mb-2'>\r\n                                <div className=\"input-group-prepend\">\r\n                                    <span className=\"input-group-text\">Cost</span>\r\n                                </div>\r\n\r\n                                <input type=\"number\" name=\"cost\" id=\"cost\" className=\"form-control\"\r\n                                    min=\"0\" step=\"1\" value={currentProduct.cost}\r\n                                    onChange={e => setCurrentProduct({ ...currentProduct, cost: e.target.value })}\r\n                                />\r\n                                <div className=\"input-group-append \">\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n                        </form>\r\n\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button\r\n                            type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\"\r\n                            onClick={() => dispatch(displayProductsModal(false))}\r\n                        >\r\n                            Close\r\n                        </button>\r\n                        <button\r\n                            type=\"button\" className=\"btn btn-primary\"\r\n                            disabled={!validation}\r\n                            onClick={e => onSave(e)}\r\n                        >\r\n                            {loadingStatus ? <i className=\"fa fa-circle-o-notch fa-spin\"></i> : ''}\r\n                            &nbsp;Save\r\n                    </button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n}",{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":1,"column":28,"nodeType":"82","messageId":"83","endLine":1,"endColumn":36},{"ruleId":"80","severity":1,"message":"84","line":4,"column":10,"nodeType":"82","messageId":"83","endLine":4,"endColumn":18},{"ruleId":"85","severity":1,"message":"86","line":23,"column":8,"nodeType":"87","endLine":23,"endColumn":16,"suggestions":"88"},{"ruleId":"76","replacedBy":"89"},{"ruleId":"78","replacedBy":"90"},{"ruleId":"80","severity":1,"message":"91","line":1,"column":17,"nodeType":"82","messageId":"83","endLine":1,"endColumn":26},{"ruleId":"80","severity":1,"message":"92","line":13,"column":11,"nodeType":"82","messageId":"83","endLine":13,"endColumn":24},{"ruleId":"85","severity":1,"message":"86","line":22,"column":8,"nodeType":"87","endLine":22,"endColumn":16,"suggestions":"93"},{"ruleId":"80","severity":1,"message":"91","line":1,"column":17,"nodeType":"82","messageId":"83","endLine":1,"endColumn":26},{"ruleId":"80","severity":1,"message":"94","line":22,"column":11,"nodeType":"82","messageId":"83","endLine":22,"endColumn":33},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'knapsack' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["97"],["95"],["96"],"'useEffect' is defined but never used.","'productsModal' is assigned a value but never used.",["98"],"'createWarningApearance' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},{"desc":"99","fix":"101"},"Update the dependencies array to be: [dispatch, status]",{"range":"102","text":"103"},{"range":"104","text":"103"},[924,932],"[dispatch, status]",[655,663]]